'use strict';

var baseSlice = require('./_baseSlice');

/**
 * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
 * without support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to query.
 * @param {Function} predicate The function invoked per iteration.
 * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Array} Returns the slice of `array`.
 */
function baseWhile(array, predicate, isDrop, fromRight) {
  var length = array.length,
      index = fromRight ? length : -1;

  while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}

  return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
}

module.exports = baseWhile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3B1YmxpYy9saWIvbG9kYXNoL19iYXNlV2hpbGUuanMiXSwibmFtZXMiOlsiYmFzZVNsaWNlIiwicmVxdWlyZSIsImJhc2VXaGlsZSIsImFycmF5IiwicHJlZGljYXRlIiwiaXNEcm9wIiwiZnJvbVJpZ2h0IiwibGVuZ3RoIiwiaW5kZXgiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLFlBQVlDLFFBQVEsY0FBUixDQUFoQjs7QUFFQTs7Ozs7Ozs7Ozs7QUFXQSxTQUFTQyxTQUFULENBQW1CQyxLQUFuQixFQUEwQkMsU0FBMUIsRUFBcUNDLE1BQXJDLEVBQTZDQyxTQUE3QyxFQUF3RDtBQUN0RCxNQUFJQyxTQUFTSixNQUFNSSxNQUFuQjtBQUFBLE1BQ0lDLFFBQVFGLFlBQVlDLE1BQVosR0FBcUIsQ0FBQyxDQURsQzs7QUFHQSxTQUFPLENBQUNELFlBQVlFLE9BQVosR0FBc0IsRUFBRUEsS0FBRixHQUFVRCxNQUFqQyxLQUNMSCxVQUFVRCxNQUFNSyxLQUFOLENBQVYsRUFBd0JBLEtBQXhCLEVBQStCTCxLQUEvQixDQURGLEVBQ3lDLENBQUU7O0FBRTNDLFNBQU9FLFNBQ0hMLFVBQVVHLEtBQVYsRUFBa0JHLFlBQVksQ0FBWixHQUFnQkUsS0FBbEMsRUFBMkNGLFlBQVlFLFFBQVEsQ0FBcEIsR0FBd0JELE1BQW5FLENBREcsR0FFSFAsVUFBVUcsS0FBVixFQUFrQkcsWUFBWUUsUUFBUSxDQUFwQixHQUF3QixDQUExQyxFQUErQ0YsWUFBWUMsTUFBWixHQUFxQkMsS0FBcEUsQ0FGSjtBQUdEOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCUixTQUFqQiIsImZpbGUiOiJfYmFzZVdoaWxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGJhc2VTbGljZSA9IHJlcXVpcmUoJy4vX2Jhc2VTbGljZScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5kcm9wV2hpbGVgIGFuZCBgXy50YWtlV2hpbGVgXG4gKiB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEcm9wXSBTcGVjaWZ5IGRyb3BwaW5nIGVsZW1lbnRzIGluc3RlYWQgb2YgdGFraW5nIHRoZW0uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYmFzZVdoaWxlKGFycmF5LCBwcmVkaWNhdGUsIGlzRHJvcCwgZnJvbVJpZ2h0KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xO1xuXG4gIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpICYmXG4gICAgcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge31cblxuICByZXR1cm4gaXNEcm9wXG4gICAgPyBiYXNlU2xpY2UoYXJyYXksIChmcm9tUmlnaHQgPyAwIDogaW5kZXgpLCAoZnJvbVJpZ2h0ID8gaW5kZXggKyAxIDogbGVuZ3RoKSlcbiAgICA6IGJhc2VTbGljZShhcnJheSwgKGZyb21SaWdodCA/IGluZGV4ICsgMSA6IDApLCAoZnJvbVJpZ2h0ID8gbGVuZ3RoIDogaW5kZXgpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlV2hpbGU7XG4iXX0=
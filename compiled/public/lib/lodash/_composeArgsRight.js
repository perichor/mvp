"use strict";

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * This function is like `composeArgs` except that the arguments composition
 * is tailored for `_.partialRight`.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to append to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */
function composeArgsRight(args, partials, holders, isCurried) {
  var argsIndex = -1,
      argsLength = args.length,
      holdersIndex = -1,
      holdersLength = holders.length,
      rightIndex = -1,
      rightLength = partials.length,
      rangeLength = nativeMax(argsLength - holdersLength, 0),
      result = Array(rangeLength + rightLength),
      isUncurried = !isCurried;

  while (++argsIndex < rangeLength) {
    result[argsIndex] = args[argsIndex];
  }
  var offset = argsIndex;
  while (++rightIndex < rightLength) {
    result[offset + rightIndex] = partials[rightIndex];
  }
  while (++holdersIndex < holdersLength) {
    if (isUncurried || argsIndex < argsLength) {
      result[offset + holders[holdersIndex]] = args[argsIndex++];
    }
  }
  return result;
}

module.exports = composeArgsRight;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3B1YmxpYy9saWIvbG9kYXNoL19jb21wb3NlQXJnc1JpZ2h0LmpzIl0sIm5hbWVzIjpbIm5hdGl2ZU1heCIsIk1hdGgiLCJtYXgiLCJjb21wb3NlQXJnc1JpZ2h0IiwiYXJncyIsInBhcnRpYWxzIiwiaG9sZGVycyIsImlzQ3VycmllZCIsImFyZ3NJbmRleCIsImFyZ3NMZW5ndGgiLCJsZW5ndGgiLCJob2xkZXJzSW5kZXgiLCJob2xkZXJzTGVuZ3RoIiwicmlnaHRJbmRleCIsInJpZ2h0TGVuZ3RoIiwicmFuZ2VMZW5ndGgiLCJyZXN1bHQiLCJBcnJheSIsImlzVW5jdXJyaWVkIiwib2Zmc2V0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBLElBQUlBLFlBQVlDLEtBQUtDLEdBQXJCOztBQUVBOzs7Ozs7Ozs7OztBQVdBLFNBQVNDLGdCQUFULENBQTBCQyxJQUExQixFQUFnQ0MsUUFBaEMsRUFBMENDLE9BQTFDLEVBQW1EQyxTQUFuRCxFQUE4RDtBQUM1RCxNQUFJQyxZQUFZLENBQUMsQ0FBakI7QUFBQSxNQUNJQyxhQUFhTCxLQUFLTSxNQUR0QjtBQUFBLE1BRUlDLGVBQWUsQ0FBQyxDQUZwQjtBQUFBLE1BR0lDLGdCQUFnQk4sUUFBUUksTUFINUI7QUFBQSxNQUlJRyxhQUFhLENBQUMsQ0FKbEI7QUFBQSxNQUtJQyxjQUFjVCxTQUFTSyxNQUwzQjtBQUFBLE1BTUlLLGNBQWNmLFVBQVVTLGFBQWFHLGFBQXZCLEVBQXNDLENBQXRDLENBTmxCO0FBQUEsTUFPSUksU0FBU0MsTUFBTUYsY0FBY0QsV0FBcEIsQ0FQYjtBQUFBLE1BUUlJLGNBQWMsQ0FBQ1gsU0FSbkI7O0FBVUEsU0FBTyxFQUFFQyxTQUFGLEdBQWNPLFdBQXJCLEVBQWtDO0FBQ2hDQyxXQUFPUixTQUFQLElBQW9CSixLQUFLSSxTQUFMLENBQXBCO0FBQ0Q7QUFDRCxNQUFJVyxTQUFTWCxTQUFiO0FBQ0EsU0FBTyxFQUFFSyxVQUFGLEdBQWVDLFdBQXRCLEVBQW1DO0FBQ2pDRSxXQUFPRyxTQUFTTixVQUFoQixJQUE4QlIsU0FBU1EsVUFBVCxDQUE5QjtBQUNEO0FBQ0QsU0FBTyxFQUFFRixZQUFGLEdBQWlCQyxhQUF4QixFQUF1QztBQUNyQyxRQUFJTSxlQUFlVixZQUFZQyxVQUEvQixFQUEyQztBQUN6Q08sYUFBT0csU0FBU2IsUUFBUUssWUFBUixDQUFoQixJQUF5Q1AsS0FBS0ksV0FBTCxDQUF6QztBQUNEO0FBQ0Y7QUFDRCxTQUFPUSxNQUFQO0FBQ0Q7O0FBRURJLE9BQU9DLE9BQVAsR0FBaUJsQixnQkFBakIiLCJmaWxlIjoiX2NvbXBvc2VBcmdzUmlnaHQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWF4ID0gTWF0aC5tYXg7XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBjb21wb3NlQXJnc2AgZXhjZXB0IHRoYXQgdGhlIGFyZ3VtZW50cyBjb21wb3NpdGlvblxuICogaXMgdGFpbG9yZWQgZm9yIGBfLnBhcnRpYWxSaWdodGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxuICogQHBhcmFtIHtBcnJheX0gaG9sZGVycyBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICogQHBhcmFtcyB7Ym9vbGVhbn0gW2lzQ3VycmllZF0gU3BlY2lmeSBjb21wb3NpbmcgZm9yIGEgY3VycmllZCBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbXBvc2VkIGFyZ3VtZW50cy5cbiAqL1xuZnVuY3Rpb24gY29tcG9zZUFyZ3NSaWdodChhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgIGhvbGRlcnNJbmRleCA9IC0xLFxuICAgICAgaG9sZGVyc0xlbmd0aCA9IGhvbGRlcnMubGVuZ3RoLFxuICAgICAgcmlnaHRJbmRleCA9IC0xLFxuICAgICAgcmlnaHRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICByYW5nZUxlbmd0aCA9IG5hdGl2ZU1heChhcmdzTGVuZ3RoIC0gaG9sZGVyc0xlbmd0aCwgMCksXG4gICAgICByZXN1bHQgPSBBcnJheShyYW5nZUxlbmd0aCArIHJpZ2h0TGVuZ3RoKSxcbiAgICAgIGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZDtcblxuICB3aGlsZSAoKythcmdzSW5kZXggPCByYW5nZUxlbmd0aCkge1xuICAgIHJlc3VsdFthcmdzSW5kZXhdID0gYXJnc1thcmdzSW5kZXhdO1xuICB9XG4gIHZhciBvZmZzZXQgPSBhcmdzSW5kZXg7XG4gIHdoaWxlICgrK3JpZ2h0SW5kZXggPCByaWdodExlbmd0aCkge1xuICAgIHJlc3VsdFtvZmZzZXQgKyByaWdodEluZGV4XSA9IHBhcnRpYWxzW3JpZ2h0SW5kZXhdO1xuICB9XG4gIHdoaWxlICgrK2hvbGRlcnNJbmRleCA8IGhvbGRlcnNMZW5ndGgpIHtcbiAgICBpZiAoaXNVbmN1cnJpZWQgfHwgYXJnc0luZGV4IDwgYXJnc0xlbmd0aCkge1xuICAgICAgcmVzdWx0W29mZnNldCArIGhvbGRlcnNbaG9sZGVyc0luZGV4XV0gPSBhcmdzW2FyZ3NJbmRleCsrXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb21wb3NlQXJnc1JpZ2h0O1xuIl19
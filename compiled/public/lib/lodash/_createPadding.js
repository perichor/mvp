'use strict';

var baseRepeat = require('./_baseRepeat'),
    baseToString = require('./_baseToString'),
    castSlice = require('./_castSlice'),
    hasUnicode = require('./_hasUnicode'),
    stringSize = require('./_stringSize'),
    stringToArray = require('./_stringToArray');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeCeil = Math.ceil;

/**
 * Creates the padding for `string` based on `length`. The `chars` string
 * is truncated if the number of characters exceeds `length`.
 *
 * @private
 * @param {number} length The padding length.
 * @param {string} [chars=' '] The string used as padding.
 * @returns {string} Returns the padding for `string`.
 */
function createPadding(length, chars) {
  chars = chars === undefined ? ' ' : baseToString(chars);

  var charsLength = chars.length;
  if (charsLength < 2) {
    return charsLength ? baseRepeat(chars, length) : chars;
  }
  var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
  return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
}

module.exports = createPadding;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3B1YmxpYy9saWIvbG9kYXNoL19jcmVhdGVQYWRkaW5nLmpzIl0sIm5hbWVzIjpbImJhc2VSZXBlYXQiLCJyZXF1aXJlIiwiYmFzZVRvU3RyaW5nIiwiY2FzdFNsaWNlIiwiaGFzVW5pY29kZSIsInN0cmluZ1NpemUiLCJzdHJpbmdUb0FycmF5IiwibmF0aXZlQ2VpbCIsIk1hdGgiLCJjZWlsIiwiY3JlYXRlUGFkZGluZyIsImxlbmd0aCIsImNoYXJzIiwidW5kZWZpbmVkIiwiY2hhcnNMZW5ndGgiLCJyZXN1bHQiLCJqb2luIiwic2xpY2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLGFBQWFDLFFBQVEsZUFBUixDQUFqQjtBQUFBLElBQ0lDLGVBQWVELFFBQVEsaUJBQVIsQ0FEbkI7QUFBQSxJQUVJRSxZQUFZRixRQUFRLGNBQVIsQ0FGaEI7QUFBQSxJQUdJRyxhQUFhSCxRQUFRLGVBQVIsQ0FIakI7QUFBQSxJQUlJSSxhQUFhSixRQUFRLGVBQVIsQ0FKakI7QUFBQSxJQUtJSyxnQkFBZ0JMLFFBQVEsa0JBQVIsQ0FMcEI7O0FBT0E7QUFDQSxJQUFJTSxhQUFhQyxLQUFLQyxJQUF0Qjs7QUFFQTs7Ozs7Ozs7O0FBU0EsU0FBU0MsYUFBVCxDQUF1QkMsTUFBdkIsRUFBK0JDLEtBQS9CLEVBQXNDO0FBQ3BDQSxVQUFRQSxVQUFVQyxTQUFWLEdBQXNCLEdBQXRCLEdBQTRCWCxhQUFhVSxLQUFiLENBQXBDOztBQUVBLE1BQUlFLGNBQWNGLE1BQU1ELE1BQXhCO0FBQ0EsTUFBSUcsY0FBYyxDQUFsQixFQUFxQjtBQUNuQixXQUFPQSxjQUFjZCxXQUFXWSxLQUFYLEVBQWtCRCxNQUFsQixDQUFkLEdBQTBDQyxLQUFqRDtBQUNEO0FBQ0QsTUFBSUcsU0FBU2YsV0FBV1ksS0FBWCxFQUFrQkwsV0FBV0ksU0FBU04sV0FBV08sS0FBWCxDQUFwQixDQUFsQixDQUFiO0FBQ0EsU0FBT1IsV0FBV1EsS0FBWCxJQUNIVCxVQUFVRyxjQUFjUyxNQUFkLENBQVYsRUFBaUMsQ0FBakMsRUFBb0NKLE1BQXBDLEVBQTRDSyxJQUE1QyxDQUFpRCxFQUFqRCxDQURHLEdBRUhELE9BQU9FLEtBQVAsQ0FBYSxDQUFiLEVBQWdCTixNQUFoQixDQUZKO0FBR0Q7O0FBRURPLE9BQU9DLE9BQVAsR0FBaUJULGFBQWpCIiwiZmlsZSI6Il9jcmVhdGVQYWRkaW5nLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGJhc2VSZXBlYXQgPSByZXF1aXJlKCcuL19iYXNlUmVwZWF0JyksXG4gICAgYmFzZVRvU3RyaW5nID0gcmVxdWlyZSgnLi9fYmFzZVRvU3RyaW5nJyksXG4gICAgY2FzdFNsaWNlID0gcmVxdWlyZSgnLi9fY2FzdFNsaWNlJyksXG4gICAgaGFzVW5pY29kZSA9IHJlcXVpcmUoJy4vX2hhc1VuaWNvZGUnKSxcbiAgICBzdHJpbmdTaXplID0gcmVxdWlyZSgnLi9fc3RyaW5nU2l6ZScpLFxuICAgIHN0cmluZ1RvQXJyYXkgPSByZXF1aXJlKCcuL19zdHJpbmdUb0FycmF5Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVDZWlsID0gTWF0aC5jZWlsO1xuXG4vKipcbiAqIENyZWF0ZXMgdGhlIHBhZGRpbmcgZm9yIGBzdHJpbmdgIGJhc2VkIG9uIGBsZW5ndGhgLiBUaGUgYGNoYXJzYCBzdHJpbmdcbiAqIGlzIHRydW5jYXRlZCBpZiB0aGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgZXhjZWVkcyBgbGVuZ3RoYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCBUaGUgcGFkZGluZyBsZW5ndGguXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkaW5nIGZvciBgc3RyaW5nYC5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUGFkZGluZyhsZW5ndGgsIGNoYXJzKSB7XG4gIGNoYXJzID0gY2hhcnMgPT09IHVuZGVmaW5lZCA/ICcgJyA6IGJhc2VUb1N0cmluZyhjaGFycyk7XG5cbiAgdmFyIGNoYXJzTGVuZ3RoID0gY2hhcnMubGVuZ3RoO1xuICBpZiAoY2hhcnNMZW5ndGggPCAyKSB7XG4gICAgcmV0dXJuIGNoYXJzTGVuZ3RoID8gYmFzZVJlcGVhdChjaGFycywgbGVuZ3RoKSA6IGNoYXJzO1xuICB9XG4gIHZhciByZXN1bHQgPSBiYXNlUmVwZWF0KGNoYXJzLCBuYXRpdmVDZWlsKGxlbmd0aCAvIHN0cmluZ1NpemUoY2hhcnMpKSk7XG4gIHJldHVybiBoYXNVbmljb2RlKGNoYXJzKVxuICAgID8gY2FzdFNsaWNlKHN0cmluZ1RvQXJyYXkocmVzdWx0KSwgMCwgbGVuZ3RoKS5qb2luKCcnKVxuICAgIDogcmVzdWx0LnNsaWNlKDAsIGxlbmd0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlUGFkZGluZztcbiJdfQ==
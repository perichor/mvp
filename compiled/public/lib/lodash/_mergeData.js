'use strict';

var composeArgs = require('./_composeArgs'),
    composeArgsRight = require('./_composeArgsRight'),
    replaceHolders = require('./_replaceHolders');

/** Used as the internal argument placeholder. */
var PLACEHOLDER = '__lodash_placeholder__';

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1,
    WRAP_BIND_KEY_FLAG = 2,
    WRAP_CURRY_BOUND_FLAG = 4,
    WRAP_CURRY_FLAG = 8,
    WRAP_ARY_FLAG = 128,
    WRAP_REARG_FLAG = 256;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin = Math.min;

/**
 * Merges the function metadata of `source` into `data`.
 *
 * Merging metadata reduces the number of wrappers used to invoke a function.
 * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
 * may be applied regardless of execution order. Methods like `_.ary` and
 * `_.rearg` modify function arguments, making the order in which they are
 * executed important, preventing the merging of metadata. However, we make
 * an exception for a safe combined case where curried functions have `_.ary`
 * and or `_.rearg` applied.
 *
 * @private
 * @param {Array} data The destination metadata.
 * @param {Array} source The source metadata.
 * @returns {Array} Returns `data`.
 */
function mergeData(data, source) {
  var bitmask = data[1],
      srcBitmask = source[1],
      newBitmask = bitmask | srcBitmask,
      isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

  var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;

  // Exit early if metadata can't be merged.
  if (!(isCommon || isCombo)) {
    return data;
  }
  // Use source `thisArg` if available.
  if (srcBitmask & WRAP_BIND_FLAG) {
    data[2] = source[2];
    // Set when currying a bound function.
    newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
  }
  // Compose partial arguments.
  var value = source[3];
  if (value) {
    var partials = data[3];
    data[3] = partials ? composeArgs(partials, value, source[4]) : value;
    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
  }
  // Compose partial right arguments.
  value = source[5];
  if (value) {
    partials = data[5];
    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
  }
  // Use source `argPos` if available.
  value = source[7];
  if (value) {
    data[7] = value;
  }
  // Use source `ary` if it's smaller.
  if (srcBitmask & WRAP_ARY_FLAG) {
    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
  }
  // Use source `arity` if one is not provided.
  if (data[9] == null) {
    data[9] = source[9];
  }
  // Use source `func` and merge bitmasks.
  data[0] = source[0];
  data[1] = newBitmask;

  return data;
}

module.exports = mergeData;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3B1YmxpYy9saWIvbG9kYXNoL19tZXJnZURhdGEuanMiXSwibmFtZXMiOlsiY29tcG9zZUFyZ3MiLCJyZXF1aXJlIiwiY29tcG9zZUFyZ3NSaWdodCIsInJlcGxhY2VIb2xkZXJzIiwiUExBQ0VIT0xERVIiLCJXUkFQX0JJTkRfRkxBRyIsIldSQVBfQklORF9LRVlfRkxBRyIsIldSQVBfQ1VSUllfQk9VTkRfRkxBRyIsIldSQVBfQ1VSUllfRkxBRyIsIldSQVBfQVJZX0ZMQUciLCJXUkFQX1JFQVJHX0ZMQUciLCJuYXRpdmVNaW4iLCJNYXRoIiwibWluIiwibWVyZ2VEYXRhIiwiZGF0YSIsInNvdXJjZSIsImJpdG1hc2siLCJzcmNCaXRtYXNrIiwibmV3Qml0bWFzayIsImlzQ29tbW9uIiwiaXNDb21ibyIsImxlbmd0aCIsInZhbHVlIiwicGFydGlhbHMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLGNBQWNDLFFBQVEsZ0JBQVIsQ0FBbEI7QUFBQSxJQUNJQyxtQkFBbUJELFFBQVEscUJBQVIsQ0FEdkI7QUFBQSxJQUVJRSxpQkFBaUJGLFFBQVEsbUJBQVIsQ0FGckI7O0FBSUE7QUFDQSxJQUFJRyxjQUFjLHdCQUFsQjs7QUFFQTtBQUNBLElBQUlDLGlCQUFpQixDQUFyQjtBQUFBLElBQ0lDLHFCQUFxQixDQUR6QjtBQUFBLElBRUlDLHdCQUF3QixDQUY1QjtBQUFBLElBR0lDLGtCQUFrQixDQUh0QjtBQUFBLElBSUlDLGdCQUFnQixHQUpwQjtBQUFBLElBS0lDLGtCQUFrQixHQUx0Qjs7QUFPQTtBQUNBLElBQUlDLFlBQVlDLEtBQUtDLEdBQXJCOztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JBLFNBQVNDLFNBQVQsQ0FBbUJDLElBQW5CLEVBQXlCQyxNQUF6QixFQUFpQztBQUMvQixNQUFJQyxVQUFVRixLQUFLLENBQUwsQ0FBZDtBQUFBLE1BQ0lHLGFBQWFGLE9BQU8sQ0FBUCxDQURqQjtBQUFBLE1BRUlHLGFBQWFGLFVBQVVDLFVBRjNCO0FBQUEsTUFHSUUsV0FBV0QsY0FBY2QsaUJBQWlCQyxrQkFBakIsR0FBc0NHLGFBQXBELENBSGY7O0FBS0EsTUFBSVksVUFDQUgsY0FBY1QsYUFBZixJQUFrQ1EsV0FBV1QsZUFBOUMsSUFDRVUsY0FBY1QsYUFBZixJQUFrQ1EsV0FBV1AsZUFBN0MsSUFBa0VLLEtBQUssQ0FBTCxFQUFRTyxNQUFSLElBQWtCTixPQUFPLENBQVAsQ0FEckYsSUFFRUUsZUFBZVQsZ0JBQWdCQyxlQUEvQixDQUFELElBQXNETSxPQUFPLENBQVAsRUFBVU0sTUFBVixJQUFvQk4sT0FBTyxDQUFQLENBQTFFLElBQXlGQyxXQUFXVCxlQUh2Rzs7QUFLQTtBQUNBLE1BQUksRUFBRVksWUFBWUMsT0FBZCxDQUFKLEVBQTRCO0FBQzFCLFdBQU9OLElBQVA7QUFDRDtBQUNEO0FBQ0EsTUFBSUcsYUFBYWIsY0FBakIsRUFBaUM7QUFDL0JVLFNBQUssQ0FBTCxJQUFVQyxPQUFPLENBQVAsQ0FBVjtBQUNBO0FBQ0FHLGtCQUFjRixVQUFVWixjQUFWLEdBQTJCLENBQTNCLEdBQStCRSxxQkFBN0M7QUFDRDtBQUNEO0FBQ0EsTUFBSWdCLFFBQVFQLE9BQU8sQ0FBUCxDQUFaO0FBQ0EsTUFBSU8sS0FBSixFQUFXO0FBQ1QsUUFBSUMsV0FBV1QsS0FBSyxDQUFMLENBQWY7QUFDQUEsU0FBSyxDQUFMLElBQVVTLFdBQVd4QixZQUFZd0IsUUFBWixFQUFzQkQsS0FBdEIsRUFBNkJQLE9BQU8sQ0FBUCxDQUE3QixDQUFYLEdBQXFETyxLQUEvRDtBQUNBUixTQUFLLENBQUwsSUFBVVMsV0FBV3JCLGVBQWVZLEtBQUssQ0FBTCxDQUFmLEVBQXdCWCxXQUF4QixDQUFYLEdBQWtEWSxPQUFPLENBQVAsQ0FBNUQ7QUFDRDtBQUNEO0FBQ0FPLFVBQVFQLE9BQU8sQ0FBUCxDQUFSO0FBQ0EsTUFBSU8sS0FBSixFQUFXO0FBQ1RDLGVBQVdULEtBQUssQ0FBTCxDQUFYO0FBQ0FBLFNBQUssQ0FBTCxJQUFVUyxXQUFXdEIsaUJBQWlCc0IsUUFBakIsRUFBMkJELEtBQTNCLEVBQWtDUCxPQUFPLENBQVAsQ0FBbEMsQ0FBWCxHQUEwRE8sS0FBcEU7QUFDQVIsU0FBSyxDQUFMLElBQVVTLFdBQVdyQixlQUFlWSxLQUFLLENBQUwsQ0FBZixFQUF3QlgsV0FBeEIsQ0FBWCxHQUFrRFksT0FBTyxDQUFQLENBQTVEO0FBQ0Q7QUFDRDtBQUNBTyxVQUFRUCxPQUFPLENBQVAsQ0FBUjtBQUNBLE1BQUlPLEtBQUosRUFBVztBQUNUUixTQUFLLENBQUwsSUFBVVEsS0FBVjtBQUNEO0FBQ0Q7QUFDQSxNQUFJTCxhQUFhVCxhQUFqQixFQUFnQztBQUM5Qk0sU0FBSyxDQUFMLElBQVVBLEtBQUssQ0FBTCxLQUFXLElBQVgsR0FBa0JDLE9BQU8sQ0FBUCxDQUFsQixHQUE4QkwsVUFBVUksS0FBSyxDQUFMLENBQVYsRUFBbUJDLE9BQU8sQ0FBUCxDQUFuQixDQUF4QztBQUNEO0FBQ0Q7QUFDQSxNQUFJRCxLQUFLLENBQUwsS0FBVyxJQUFmLEVBQXFCO0FBQ25CQSxTQUFLLENBQUwsSUFBVUMsT0FBTyxDQUFQLENBQVY7QUFDRDtBQUNEO0FBQ0FELE9BQUssQ0FBTCxJQUFVQyxPQUFPLENBQVAsQ0FBVjtBQUNBRCxPQUFLLENBQUwsSUFBVUksVUFBVjs7QUFFQSxTQUFPSixJQUFQO0FBQ0Q7O0FBRURVLE9BQU9DLE9BQVAsR0FBaUJaLFNBQWpCIiwiZmlsZSI6Il9tZXJnZURhdGEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29tcG9zZUFyZ3MgPSByZXF1aXJlKCcuL19jb21wb3NlQXJncycpLFxuICAgIGNvbXBvc2VBcmdzUmlnaHQgPSByZXF1aXJlKCcuL19jb21wb3NlQXJnc1JpZ2h0JyksXG4gICAgcmVwbGFjZUhvbGRlcnMgPSByZXF1aXJlKCcuL19yZXBsYWNlSG9sZGVycycpO1xuXG4vKiogVXNlZCBhcyB0aGUgaW50ZXJuYWwgYXJndW1lbnQgcGxhY2Vob2xkZXIuICovXG52YXIgUExBQ0VIT0xERVIgPSAnX19sb2Rhc2hfcGxhY2Vob2xkZXJfXyc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xudmFyIFdSQVBfQklORF9GTEFHID0gMSxcbiAgICBXUkFQX0JJTkRfS0VZX0ZMQUcgPSAyLFxuICAgIFdSQVBfQ1VSUllfQk9VTkRfRkxBRyA9IDQsXG4gICAgV1JBUF9DVVJSWV9GTEFHID0gOCxcbiAgICBXUkFQX0FSWV9GTEFHID0gMTI4LFxuICAgIFdSQVBfUkVBUkdfRkxBRyA9IDI1NjtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1pbiA9IE1hdGgubWluO1xuXG4vKipcbiAqIE1lcmdlcyB0aGUgZnVuY3Rpb24gbWV0YWRhdGEgb2YgYHNvdXJjZWAgaW50byBgZGF0YWAuXG4gKlxuICogTWVyZ2luZyBtZXRhZGF0YSByZWR1Y2VzIHRoZSBudW1iZXIgb2Ygd3JhcHBlcnMgdXNlZCB0byBpbnZva2UgYSBmdW5jdGlvbi5cbiAqIFRoaXMgaXMgcG9zc2libGUgYmVjYXVzZSBtZXRob2RzIGxpa2UgYF8uYmluZGAsIGBfLmN1cnJ5YCwgYW5kIGBfLnBhcnRpYWxgXG4gKiBtYXkgYmUgYXBwbGllZCByZWdhcmRsZXNzIG9mIGV4ZWN1dGlvbiBvcmRlci4gTWV0aG9kcyBsaWtlIGBfLmFyeWAgYW5kXG4gKiBgXy5yZWFyZ2AgbW9kaWZ5IGZ1bmN0aW9uIGFyZ3VtZW50cywgbWFraW5nIHRoZSBvcmRlciBpbiB3aGljaCB0aGV5IGFyZVxuICogZXhlY3V0ZWQgaW1wb3J0YW50LCBwcmV2ZW50aW5nIHRoZSBtZXJnaW5nIG9mIG1ldGFkYXRhLiBIb3dldmVyLCB3ZSBtYWtlXG4gKiBhbiBleGNlcHRpb24gZm9yIGEgc2FmZSBjb21iaW5lZCBjYXNlIHdoZXJlIGN1cnJpZWQgZnVuY3Rpb25zIGhhdmUgYF8uYXJ5YFxuICogYW5kIG9yIGBfLnJlYXJnYCBhcHBsaWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBkYXRhIFRoZSBkZXN0aW5hdGlvbiBtZXRhZGF0YS5cbiAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgc291cmNlIG1ldGFkYXRhLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBkYXRhYC5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhKGRhdGEsIHNvdXJjZSkge1xuICB2YXIgYml0bWFzayA9IGRhdGFbMV0sXG4gICAgICBzcmNCaXRtYXNrID0gc291cmNlWzFdLFxuICAgICAgbmV3Qml0bWFzayA9IGJpdG1hc2sgfCBzcmNCaXRtYXNrLFxuICAgICAgaXNDb21tb24gPSBuZXdCaXRtYXNrIDwgKFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHIHwgV1JBUF9BUllfRkxBRyk7XG5cbiAgdmFyIGlzQ29tYm8gPVxuICAgICgoc3JjQml0bWFzayA9PSBXUkFQX0FSWV9GTEFHKSAmJiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcpKSB8fFxuICAgICgoc3JjQml0bWFzayA9PSBXUkFQX0FSWV9GTEFHKSAmJiAoYml0bWFzayA9PSBXUkFQX1JFQVJHX0ZMQUcpICYmIChkYXRhWzddLmxlbmd0aCA8PSBzb3VyY2VbOF0pKSB8fFxuICAgICgoc3JjQml0bWFzayA9PSAoV1JBUF9BUllfRkxBRyB8IFdSQVBfUkVBUkdfRkxBRykpICYmIChzb3VyY2VbN10ubGVuZ3RoIDw9IHNvdXJjZVs4XSkgJiYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHKSk7XG5cbiAgLy8gRXhpdCBlYXJseSBpZiBtZXRhZGF0YSBjYW4ndCBiZSBtZXJnZWQuXG4gIGlmICghKGlzQ29tbW9uIHx8IGlzQ29tYm8pKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cbiAgLy8gVXNlIHNvdXJjZSBgdGhpc0FyZ2AgaWYgYXZhaWxhYmxlLlxuICBpZiAoc3JjQml0bWFzayAmIFdSQVBfQklORF9GTEFHKSB7XG4gICAgZGF0YVsyXSA9IHNvdXJjZVsyXTtcbiAgICAvLyBTZXQgd2hlbiBjdXJyeWluZyBhIGJvdW5kIGZ1bmN0aW9uLlxuICAgIG5ld0JpdG1hc2sgfD0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHID8gMCA6IFdSQVBfQ1VSUllfQk9VTkRfRkxBRztcbiAgfVxuICAvLyBDb21wb3NlIHBhcnRpYWwgYXJndW1lbnRzLlxuICB2YXIgdmFsdWUgPSBzb3VyY2VbM107XG4gIGlmICh2YWx1ZSkge1xuICAgIHZhciBwYXJ0aWFscyA9IGRhdGFbM107XG4gICAgZGF0YVszXSA9IHBhcnRpYWxzID8gY29tcG9zZUFyZ3MocGFydGlhbHMsIHZhbHVlLCBzb3VyY2VbNF0pIDogdmFsdWU7XG4gICAgZGF0YVs0XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVszXSwgUExBQ0VIT0xERVIpIDogc291cmNlWzRdO1xuICB9XG4gIC8vIENvbXBvc2UgcGFydGlhbCByaWdodCBhcmd1bWVudHMuXG4gIHZhbHVlID0gc291cmNlWzVdO1xuICBpZiAodmFsdWUpIHtcbiAgICBwYXJ0aWFscyA9IGRhdGFbNV07XG4gICAgZGF0YVs1XSA9IHBhcnRpYWxzID8gY29tcG9zZUFyZ3NSaWdodChwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs2XSkgOiB2YWx1ZTtcbiAgICBkYXRhWzZdID0gcGFydGlhbHMgPyByZXBsYWNlSG9sZGVycyhkYXRhWzVdLCBQTEFDRUhPTERFUikgOiBzb3VyY2VbNl07XG4gIH1cbiAgLy8gVXNlIHNvdXJjZSBgYXJnUG9zYCBpZiBhdmFpbGFibGUuXG4gIHZhbHVlID0gc291cmNlWzddO1xuICBpZiAodmFsdWUpIHtcbiAgICBkYXRhWzddID0gdmFsdWU7XG4gIH1cbiAgLy8gVXNlIHNvdXJjZSBgYXJ5YCBpZiBpdCdzIHNtYWxsZXIuXG4gIGlmIChzcmNCaXRtYXNrICYgV1JBUF9BUllfRkxBRykge1xuICAgIGRhdGFbOF0gPSBkYXRhWzhdID09IG51bGwgPyBzb3VyY2VbOF0gOiBuYXRpdmVNaW4oZGF0YVs4XSwgc291cmNlWzhdKTtcbiAgfVxuICAvLyBVc2Ugc291cmNlIGBhcml0eWAgaWYgb25lIGlzIG5vdCBwcm92aWRlZC5cbiAgaWYgKGRhdGFbOV0gPT0gbnVsbCkge1xuICAgIGRhdGFbOV0gPSBzb3VyY2VbOV07XG4gIH1cbiAgLy8gVXNlIHNvdXJjZSBgZnVuY2AgYW5kIG1lcmdlIGJpdG1hc2tzLlxuICBkYXRhWzBdID0gc291cmNlWzBdO1xuICBkYXRhWzFdID0gbmV3Qml0bWFzaztcblxuICByZXR1cm4gZGF0YTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtZXJnZURhdGE7XG4iXX0=
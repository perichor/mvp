'use strict';

var arrayEach = require('./_arrayEach'),
    arrayIncludes = require('./_arrayIncludes');

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1,
    WRAP_BIND_KEY_FLAG = 2,
    WRAP_CURRY_FLAG = 8,
    WRAP_CURRY_RIGHT_FLAG = 16,
    WRAP_PARTIAL_FLAG = 32,
    WRAP_PARTIAL_RIGHT_FLAG = 64,
    WRAP_ARY_FLAG = 128,
    WRAP_REARG_FLAG = 256,
    WRAP_FLIP_FLAG = 512;

/** Used to associate wrap methods with their bit flags. */
var wrapFlags = [['ary', WRAP_ARY_FLAG], ['bind', WRAP_BIND_FLAG], ['bindKey', WRAP_BIND_KEY_FLAG], ['curry', WRAP_CURRY_FLAG], ['curryRight', WRAP_CURRY_RIGHT_FLAG], ['flip', WRAP_FLIP_FLAG], ['partial', WRAP_PARTIAL_FLAG], ['partialRight', WRAP_PARTIAL_RIGHT_FLAG], ['rearg', WRAP_REARG_FLAG]];

/**
 * Updates wrapper `details` based on `bitmask` flags.
 *
 * @private
 * @returns {Array} details The details to modify.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Array} Returns `details`.
 */
function updateWrapDetails(details, bitmask) {
  arrayEach(wrapFlags, function (pair) {
    var value = '_.' + pair[0];
    if (bitmask & pair[1] && !arrayIncludes(details, value)) {
      details.push(value);
    }
  });
  return details.sort();
}

module.exports = updateWrapDetails;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3B1YmxpYy9saWIvbG9kYXNoL191cGRhdGVXcmFwRGV0YWlscy5qcyJdLCJuYW1lcyI6WyJhcnJheUVhY2giLCJyZXF1aXJlIiwiYXJyYXlJbmNsdWRlcyIsIldSQVBfQklORF9GTEFHIiwiV1JBUF9CSU5EX0tFWV9GTEFHIiwiV1JBUF9DVVJSWV9GTEFHIiwiV1JBUF9DVVJSWV9SSUdIVF9GTEFHIiwiV1JBUF9QQVJUSUFMX0ZMQUciLCJXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyIsIldSQVBfQVJZX0ZMQUciLCJXUkFQX1JFQVJHX0ZMQUciLCJXUkFQX0ZMSVBfRkxBRyIsIndyYXBGbGFncyIsInVwZGF0ZVdyYXBEZXRhaWxzIiwiZGV0YWlscyIsImJpdG1hc2siLCJwYWlyIiwidmFsdWUiLCJwdXNoIiwic29ydCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsWUFBWUMsUUFBUSxjQUFSLENBQWhCO0FBQUEsSUFDSUMsZ0JBQWdCRCxRQUFRLGtCQUFSLENBRHBCOztBQUdBO0FBQ0EsSUFBSUUsaUJBQWlCLENBQXJCO0FBQUEsSUFDSUMscUJBQXFCLENBRHpCO0FBQUEsSUFFSUMsa0JBQWtCLENBRnRCO0FBQUEsSUFHSUMsd0JBQXdCLEVBSDVCO0FBQUEsSUFJSUMsb0JBQW9CLEVBSnhCO0FBQUEsSUFLSUMsMEJBQTBCLEVBTDlCO0FBQUEsSUFNSUMsZ0JBQWdCLEdBTnBCO0FBQUEsSUFPSUMsa0JBQWtCLEdBUHRCO0FBQUEsSUFRSUMsaUJBQWlCLEdBUnJCOztBQVVBO0FBQ0EsSUFBSUMsWUFBWSxDQUNkLENBQUMsS0FBRCxFQUFRSCxhQUFSLENBRGMsRUFFZCxDQUFDLE1BQUQsRUFBU04sY0FBVCxDQUZjLEVBR2QsQ0FBQyxTQUFELEVBQVlDLGtCQUFaLENBSGMsRUFJZCxDQUFDLE9BQUQsRUFBVUMsZUFBVixDQUpjLEVBS2QsQ0FBQyxZQUFELEVBQWVDLHFCQUFmLENBTGMsRUFNZCxDQUFDLE1BQUQsRUFBU0ssY0FBVCxDQU5jLEVBT2QsQ0FBQyxTQUFELEVBQVlKLGlCQUFaLENBUGMsRUFRZCxDQUFDLGNBQUQsRUFBaUJDLHVCQUFqQixDQVJjLEVBU2QsQ0FBQyxPQUFELEVBQVVFLGVBQVYsQ0FUYyxDQUFoQjs7QUFZQTs7Ozs7Ozs7QUFRQSxTQUFTRyxpQkFBVCxDQUEyQkMsT0FBM0IsRUFBb0NDLE9BQXBDLEVBQTZDO0FBQzNDZixZQUFVWSxTQUFWLEVBQXFCLFVBQVNJLElBQVQsRUFBZTtBQUNsQyxRQUFJQyxRQUFRLE9BQU9ELEtBQUssQ0FBTCxDQUFuQjtBQUNBLFFBQUtELFVBQVVDLEtBQUssQ0FBTCxDQUFYLElBQXVCLENBQUNkLGNBQWNZLE9BQWQsRUFBdUJHLEtBQXZCLENBQTVCLEVBQTJEO0FBQ3pESCxjQUFRSSxJQUFSLENBQWFELEtBQWI7QUFDRDtBQUNGLEdBTEQ7QUFNQSxTQUFPSCxRQUFRSyxJQUFSLEVBQVA7QUFDRDs7QUFFREMsT0FBT0MsT0FBUCxHQUFpQlIsaUJBQWpCIiwiZmlsZSI6Il91cGRhdGVXcmFwRGV0YWlscy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhcnJheUVhY2ggPSByZXF1aXJlKCcuL19hcnJheUVhY2gnKSxcbiAgICBhcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXlJbmNsdWRlcycpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cbnZhciBXUkFQX0JJTkRfRkxBRyA9IDEsXG4gICAgV1JBUF9CSU5EX0tFWV9GTEFHID0gMixcbiAgICBXUkFQX0NVUlJZX0ZMQUcgPSA4LFxuICAgIFdSQVBfQ1VSUllfUklHSFRfRkxBRyA9IDE2LFxuICAgIFdSQVBfUEFSVElBTF9GTEFHID0gMzIsXG4gICAgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcgPSA2NCxcbiAgICBXUkFQX0FSWV9GTEFHID0gMTI4LFxuICAgIFdSQVBfUkVBUkdfRkxBRyA9IDI1NixcbiAgICBXUkFQX0ZMSVBfRkxBRyA9IDUxMjtcblxuLyoqIFVzZWQgdG8gYXNzb2NpYXRlIHdyYXAgbWV0aG9kcyB3aXRoIHRoZWlyIGJpdCBmbGFncy4gKi9cbnZhciB3cmFwRmxhZ3MgPSBbXG4gIFsnYXJ5JywgV1JBUF9BUllfRkxBR10sXG4gIFsnYmluZCcsIFdSQVBfQklORF9GTEFHXSxcbiAgWydiaW5kS2V5JywgV1JBUF9CSU5EX0tFWV9GTEFHXSxcbiAgWydjdXJyeScsIFdSQVBfQ1VSUllfRkxBR10sXG4gIFsnY3VycnlSaWdodCcsIFdSQVBfQ1VSUllfUklHSFRfRkxBR10sXG4gIFsnZmxpcCcsIFdSQVBfRkxJUF9GTEFHXSxcbiAgWydwYXJ0aWFsJywgV1JBUF9QQVJUSUFMX0ZMQUddLFxuICBbJ3BhcnRpYWxSaWdodCcsIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHXSxcbiAgWydyZWFyZycsIFdSQVBfUkVBUkdfRkxBR11cbl07XG5cbi8qKlxuICogVXBkYXRlcyB3cmFwcGVyIGBkZXRhaWxzYCBiYXNlZCBvbiBgYml0bWFza2AgZmxhZ3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEByZXR1cm5zIHtBcnJheX0gZGV0YWlscyBUaGUgZGV0YWlscyB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBkZXRhaWxzYC5cbiAqL1xuZnVuY3Rpb24gdXBkYXRlV3JhcERldGFpbHMoZGV0YWlscywgYml0bWFzaykge1xuICBhcnJheUVhY2god3JhcEZsYWdzLCBmdW5jdGlvbihwYWlyKSB7XG4gICAgdmFyIHZhbHVlID0gJ18uJyArIHBhaXJbMF07XG4gICAgaWYgKChiaXRtYXNrICYgcGFpclsxXSkgJiYgIWFycmF5SW5jbHVkZXMoZGV0YWlscywgdmFsdWUpKSB7XG4gICAgICBkZXRhaWxzLnB1c2godmFsdWUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBkZXRhaWxzLnNvcnQoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1cGRhdGVXcmFwRGV0YWlscztcbiJdfQ==
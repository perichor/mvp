"use strict";

define(["../core", "../css"], function (jQuery) {

	"use strict";

	function Tween(elem, options, prop, end, easing) {
		return new Tween.prototype.init(elem, options, prop, end, easing);
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function init(elem, options, prop, end, easing, unit) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
		},
		cur: function cur() {
			var hooks = Tween.propHooks[this.prop];

			return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
		},
		run: function run(percent) {
			var eased,
			    hooks = Tween.propHooks[this.prop];

			if (this.options.duration) {
				this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
			} else {
				this.pos = eased = percent;
			}
			this.now = (this.end - this.start) * eased + this.start;

			if (this.options.step) {
				this.options.step.call(this.elem, this.now, this);
			}

			if (hooks && hooks.set) {
				hooks.set(this);
			} else {
				Tween.propHooks._default.set(this);
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function get(tween) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
					return tween.elem[tween.prop];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css(tween.elem, tween.prop, "");

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function set(tween) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if (jQuery.fx.step[tween.prop]) {
					jQuery.fx.step[tween.prop](tween);
				} else if (tween.elem.nodeType === 1 && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
					jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
				} else {
					tween.elem[tween.prop] = tween.now;
				}
			}
		}
	};

	// Support: IE <=9 only
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function set(tween) {
			if (tween.elem.nodeType && tween.elem.parentNode) {
				tween.elem[tween.prop] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function linear(p) {
			return p;
		},
		swing: function swing(p) {
			return 0.5 - Math.cos(p * Math.PI) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back compat <1.8 extension point
	jQuery.fx.step = {};
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3B1YmxpYy9saWIvanF1ZXJ5L3NyYy9lZmZlY3RzL1R3ZWVuLmpzIl0sIm5hbWVzIjpbImRlZmluZSIsImpRdWVyeSIsIlR3ZWVuIiwiZWxlbSIsIm9wdGlvbnMiLCJwcm9wIiwiZW5kIiwiZWFzaW5nIiwicHJvdG90eXBlIiwiaW5pdCIsImNvbnN0cnVjdG9yIiwidW5pdCIsIl9kZWZhdWx0Iiwic3RhcnQiLCJub3ciLCJjdXIiLCJjc3NOdW1iZXIiLCJob29rcyIsInByb3BIb29rcyIsImdldCIsInJ1biIsInBlcmNlbnQiLCJlYXNlZCIsImR1cmF0aW9uIiwicG9zIiwic3RlcCIsImNhbGwiLCJzZXQiLCJ0d2VlbiIsInJlc3VsdCIsIm5vZGVUeXBlIiwic3R5bGUiLCJjc3MiLCJmeCIsImNzc1Byb3BzIiwiY3NzSG9va3MiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwicGFyZW50Tm9kZSIsImxpbmVhciIsInAiLCJzd2luZyIsIk1hdGgiLCJjb3MiLCJQSSJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsT0FBUSxDQUNQLFNBRE8sRUFFUCxRQUZPLENBQVIsRUFHRyxVQUFVQyxNQUFWLEVBQW1COztBQUV0Qjs7QUFFQSxVQUFTQyxLQUFULENBQWdCQyxJQUFoQixFQUFzQkMsT0FBdEIsRUFBK0JDLElBQS9CLEVBQXFDQyxHQUFyQyxFQUEwQ0MsTUFBMUMsRUFBbUQ7QUFDbEQsU0FBTyxJQUFJTCxNQUFNTSxTQUFOLENBQWdCQyxJQUFwQixDQUEwQk4sSUFBMUIsRUFBZ0NDLE9BQWhDLEVBQXlDQyxJQUF6QyxFQUErQ0MsR0FBL0MsRUFBb0RDLE1BQXBELENBQVA7QUFDQTtBQUNETixRQUFPQyxLQUFQLEdBQWVBLEtBQWY7O0FBRUFBLE9BQU1NLFNBQU4sR0FBa0I7QUFDakJFLGVBQWFSLEtBREk7QUFFakJPLFFBQU0sY0FBVU4sSUFBVixFQUFnQkMsT0FBaEIsRUFBeUJDLElBQXpCLEVBQStCQyxHQUEvQixFQUFvQ0MsTUFB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RDs7QUFRQWIsUUFBT00sTUFBUCxHQUFnQjtBQUNmZ0MsVUFBUSxnQkFBVUMsQ0FBVixFQUFjO0FBQ3JCLFVBQU9BLENBQVA7QUFDQSxHQUhjO0FBSWZDLFNBQU8sZUFBVUQsQ0FBVixFQUFjO0FBQ3BCLFVBQU8sTUFBTUUsS0FBS0MsR0FBTCxDQUFVSCxJQUFJRSxLQUFLRSxFQUFuQixJQUEwQixDQUF2QztBQUNBLEdBTmM7QUFPZmhDLFlBQVU7QUFQSyxFQUFoQjs7QUFVQVgsUUFBT2dDLEVBQVAsR0FBWS9CLE1BQU1NLFNBQU4sQ0FBZ0JDLElBQTVCOztBQUVBO0FBQ0FSLFFBQU9nQyxFQUFQLENBQVVSLElBQVYsR0FBaUIsRUFBakI7QUFFQyxDQTFIRCIsImZpbGUiOiJUd2Vlbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggW1xuXHRcIi4uL2NvcmVcIixcblx0XCIuLi9jc3NcIlxuXSwgZnVuY3Rpb24oIGpRdWVyeSApIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG59ICk7XG4iXX0=
"use strict";

define(["../core"], function (jQuery) {

	"use strict";

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function

	var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {
		var i = 0,
		    len = elems.length,
		    bulk = key == null;

		// Sets many values
		if (jQuery.type(key) === "object") {
			chainable = true;
			for (i in key) {
				access(elems, fn, i, key[i], true, emptyGet, raw);
			}

			// Sets one value
		} else if (value !== undefined) {
			chainable = true;

			if (!jQuery.isFunction(value)) {
				raw = true;
			}

			if (bulk) {

				// Bulk operations run against the entire set
				if (raw) {
					fn.call(elems, value);
					fn = null;

					// ...except when executing function values
				} else {
					bulk = fn;
					fn = function fn(elem, key, value) {
						return bulk.call(jQuery(elem), value);
					};
				}
			}

			if (fn) {
				for (; i < len; i++) {
					fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
				}
			}
		}

		if (chainable) {
			return elems;
		}

		// Gets
		if (bulk) {
			return fn.call(elems);
		}

		return len ? fn(elems[0], key) : emptyGet;
	};

	return access;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3B1YmxpYy9saWIvanF1ZXJ5L3NyYy9jb3JlL2FjY2Vzcy5qcyJdLCJuYW1lcyI6WyJkZWZpbmUiLCJqUXVlcnkiLCJhY2Nlc3MiLCJlbGVtcyIsImZuIiwia2V5IiwidmFsdWUiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImkiLCJsZW4iLCJsZW5ndGgiLCJidWxrIiwidHlwZSIsInVuZGVmaW5lZCIsImlzRnVuY3Rpb24iLCJjYWxsIiwiZWxlbSJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsT0FBUSxDQUNQLFNBRE8sQ0FBUixFQUVHLFVBQVVDLE1BQVYsRUFBbUI7O0FBRXRCOztBQUVBO0FBQ0E7O0FBQ0EsS0FBSUMsU0FBUyxTQUFUQSxNQUFTLENBQVVDLEtBQVYsRUFBaUJDLEVBQWpCLEVBQXFCQyxHQUFyQixFQUEwQkMsS0FBMUIsRUFBaUNDLFNBQWpDLEVBQTRDQyxRQUE1QyxFQUFzREMsR0FBdEQsRUFBNEQ7QUFDeEUsTUFBSUMsSUFBSSxDQUFSO0FBQUEsTUFDQ0MsTUFBTVIsTUFBTVMsTUFEYjtBQUFBLE1BRUNDLE9BQU9SLE9BQU8sSUFGZjs7QUFJQTtBQUNBLE1BQUtKLE9BQU9hLElBQVAsQ0FBYVQsR0FBYixNQUF1QixRQUE1QixFQUF1QztBQUN0Q0UsZUFBWSxJQUFaO0FBQ0EsUUFBTUcsQ0FBTixJQUFXTCxHQUFYLEVBQWlCO0FBQ2hCSCxXQUFRQyxLQUFSLEVBQWVDLEVBQWYsRUFBbUJNLENBQW5CLEVBQXNCTCxJQUFLSyxDQUFMLENBQXRCLEVBQWdDLElBQWhDLEVBQXNDRixRQUF0QyxFQUFnREMsR0FBaEQ7QUFDQTs7QUFFRjtBQUNDLEdBUEQsTUFPTyxJQUFLSCxVQUFVUyxTQUFmLEVBQTJCO0FBQ2pDUixlQUFZLElBQVo7O0FBRUEsT0FBSyxDQUFDTixPQUFPZSxVQUFQLENBQW1CVixLQUFuQixDQUFOLEVBQW1DO0FBQ2xDRyxVQUFNLElBQU47QUFDQTs7QUFFRCxPQUFLSSxJQUFMLEVBQVk7O0FBRVg7QUFDQSxRQUFLSixHQUFMLEVBQVc7QUFDVkwsUUFBR2EsSUFBSCxDQUFTZCxLQUFULEVBQWdCRyxLQUFoQjtBQUNBRixVQUFLLElBQUw7O0FBRUQ7QUFDQyxLQUxELE1BS087QUFDTlMsWUFBT1QsRUFBUDtBQUNBQSxVQUFLLFlBQVVjLElBQVYsRUFBZ0JiLEdBQWhCLEVBQXFCQyxLQUFyQixFQUE2QjtBQUNqQyxhQUFPTyxLQUFLSSxJQUFMLENBQVdoQixPQUFRaUIsSUFBUixDQUFYLEVBQTJCWixLQUEzQixDQUFQO0FBQ0EsTUFGRDtBQUdBO0FBQ0Q7O0FBRUQsT0FBS0YsRUFBTCxFQUFVO0FBQ1QsV0FBUU0sSUFBSUMsR0FBWixFQUFpQkQsR0FBakIsRUFBdUI7QUFDdEJOLFFBQ0NELE1BQU9PLENBQVAsQ0FERCxFQUNhTCxHQURiLEVBQ2tCSSxNQUNqQkgsS0FEaUIsR0FFakJBLE1BQU1XLElBQU4sQ0FBWWQsTUFBT08sQ0FBUCxDQUFaLEVBQXdCQSxDQUF4QixFQUEyQk4sR0FBSUQsTUFBT08sQ0FBUCxDQUFKLEVBQWdCTCxHQUFoQixDQUEzQixDQUhEO0FBS0E7QUFDRDtBQUNEOztBQUVELE1BQUtFLFNBQUwsRUFBaUI7QUFDaEIsVUFBT0osS0FBUDtBQUNBOztBQUVEO0FBQ0EsTUFBS1UsSUFBTCxFQUFZO0FBQ1gsVUFBT1QsR0FBR2EsSUFBSCxDQUFTZCxLQUFULENBQVA7QUFDQTs7QUFFRCxTQUFPUSxNQUFNUCxHQUFJRCxNQUFPLENBQVAsQ0FBSixFQUFnQkUsR0FBaEIsQ0FBTixHQUE4QkcsUUFBckM7QUFDQSxFQXpERDs7QUEyREEsUUFBT04sTUFBUDtBQUVDLENBckVEIiwiZmlsZSI6ImFjY2Vzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggW1xuXHRcIi4uL2NvcmVcIlxuXSwgZnVuY3Rpb24oIGpRdWVyeSApIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggalF1ZXJ5LnR5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggY2hhaW5hYmxlICkge1xuXHRcdHJldHVybiBlbGVtcztcblx0fVxuXG5cdC8vIEdldHNcblx0aWYgKCBidWxrICkge1xuXHRcdHJldHVybiBmbi5jYWxsKCBlbGVtcyApO1xuXHR9XG5cblx0cmV0dXJuIGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcblxucmV0dXJuIGFjY2VzcztcblxufSApO1xuIl19
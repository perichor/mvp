/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var getVendorPrefixedEventName = require('react-dom/lib/getVendorPrefixedEventName');

var endEvents = [];

function detectEvents() {
  var animEnd = getVendorPrefixedEventName('animationend');
  var transEnd = getVendorPrefixedEventName('transitionend');

  if (animEnd) {
    endEvents.push(animEnd);
  }

  if (transEnd) {
    endEvents.push(transEnd);
  }
}

if (ExecutionEnvironment.canUseDOM) {
  detectEvents();
}

// We use the raw {add|remove}EventListener() call because EventListener
// does not know how to remove event listeners and we really should
// clean up. Also, these events are not triggered in older browsers
// so we should be A-OK here.

function addEventListener(node, eventName, eventListener) {
  node.addEventListener(eventName, eventListener, false);
}

function removeEventListener(node, eventName, eventListener) {
  node.removeEventListener(eventName, eventListener, false);
}

var ReactTransitionEvents = {
  addEndEventListener: function addEndEventListener(node, eventListener) {
    if (endEvents.length === 0) {
      // If CSS transitions are not supported, trigger an "end animation"
      // event immediately.
      window.setTimeout(eventListener, 0);
      return;
    }
    endEvents.forEach(function (endEvent) {
      addEventListener(node, endEvent, eventListener);
    });
  },

  removeEndEventListener: function removeEndEventListener(node, eventListener) {
    if (endEvents.length === 0) {
      return;
    }
    endEvents.forEach(function (endEvent) {
      removeEventListener(node, endEvent, eventListener);
    });
  }
};

module.exports = ReactTransitionEvents;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3B1YmxpYy9saWIvcmVhY3QvbGliL1JlYWN0VHJhbnNpdGlvbkV2ZW50cy5qcyJdLCJuYW1lcyI6WyJFeGVjdXRpb25FbnZpcm9ubWVudCIsInJlcXVpcmUiLCJnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSIsImVuZEV2ZW50cyIsImRldGVjdEV2ZW50cyIsImFuaW1FbmQiLCJ0cmFuc0VuZCIsInB1c2giLCJjYW5Vc2VET00iLCJhZGRFdmVudExpc3RlbmVyIiwibm9kZSIsImV2ZW50TmFtZSIsImV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiUmVhY3RUcmFuc2l0aW9uRXZlbnRzIiwiYWRkRW5kRXZlbnRMaXN0ZW5lciIsImxlbmd0aCIsIndpbmRvdyIsInNldFRpbWVvdXQiLCJmb3JFYWNoIiwiZW5kRXZlbnQiLCJyZW1vdmVFbmRFdmVudExpc3RlbmVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7QUFVQTs7QUFFQSxJQUFJQSx1QkFBdUJDLFFBQVEsK0JBQVIsQ0FBM0I7O0FBRUEsSUFBSUMsNkJBQTZCRCxRQUFRLDBDQUFSLENBQWpDOztBQUVBLElBQUlFLFlBQVksRUFBaEI7O0FBRUEsU0FBU0MsWUFBVCxHQUF3QjtBQUN0QixNQUFJQyxVQUFVSCwyQkFBMkIsY0FBM0IsQ0FBZDtBQUNBLE1BQUlJLFdBQVdKLDJCQUEyQixlQUEzQixDQUFmOztBQUVBLE1BQUlHLE9BQUosRUFBYTtBQUNYRixjQUFVSSxJQUFWLENBQWVGLE9BQWY7QUFDRDs7QUFFRCxNQUFJQyxRQUFKLEVBQWM7QUFDWkgsY0FBVUksSUFBVixDQUFlRCxRQUFmO0FBQ0Q7QUFDRjs7QUFFRCxJQUFJTixxQkFBcUJRLFNBQXpCLEVBQW9DO0FBQ2xDSjtBQUNEOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNLLGdCQUFULENBQTBCQyxJQUExQixFQUFnQ0MsU0FBaEMsRUFBMkNDLGFBQTNDLEVBQTBEO0FBQ3hERixPQUFLRCxnQkFBTCxDQUFzQkUsU0FBdEIsRUFBaUNDLGFBQWpDLEVBQWdELEtBQWhEO0FBQ0Q7O0FBRUQsU0FBU0MsbUJBQVQsQ0FBNkJILElBQTdCLEVBQW1DQyxTQUFuQyxFQUE4Q0MsYUFBOUMsRUFBNkQ7QUFDM0RGLE9BQUtHLG1CQUFMLENBQXlCRixTQUF6QixFQUFvQ0MsYUFBcEMsRUFBbUQsS0FBbkQ7QUFDRDs7QUFFRCxJQUFJRSx3QkFBd0I7QUFDMUJDLHVCQUFxQiw2QkFBVUwsSUFBVixFQUFnQkUsYUFBaEIsRUFBK0I7QUFDbEQsUUFBSVQsVUFBVWEsTUFBVixLQUFxQixDQUF6QixFQUE0QjtBQUMxQjtBQUNBO0FBQ0FDLGFBQU9DLFVBQVAsQ0FBa0JOLGFBQWxCLEVBQWlDLENBQWpDO0FBQ0E7QUFDRDtBQUNEVCxjQUFVZ0IsT0FBVixDQUFrQixVQUFVQyxRQUFWLEVBQW9CO0FBQ3BDWCx1QkFBaUJDLElBQWpCLEVBQXVCVSxRQUF2QixFQUFpQ1IsYUFBakM7QUFDRCxLQUZEO0FBR0QsR0FYeUI7O0FBYTFCUywwQkFBd0IsZ0NBQVVYLElBQVYsRUFBZ0JFLGFBQWhCLEVBQStCO0FBQ3JELFFBQUlULFVBQVVhLE1BQVYsS0FBcUIsQ0FBekIsRUFBNEI7QUFDMUI7QUFDRDtBQUNEYixjQUFVZ0IsT0FBVixDQUFrQixVQUFVQyxRQUFWLEVBQW9CO0FBQ3BDUCwwQkFBb0JILElBQXBCLEVBQTBCVSxRQUExQixFQUFvQ1IsYUFBcEM7QUFDRCxLQUZEO0FBR0Q7QUFwQnlCLENBQTVCOztBQXVCQVUsT0FBT0MsT0FBUCxHQUFpQlQscUJBQWpCIiwiZmlsZSI6IlJlYWN0VHJhbnNpdGlvbkV2ZW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSA9IHJlcXVpcmUoJ3JlYWN0LWRvbS9saWIvZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUnKTtcblxudmFyIGVuZEV2ZW50cyA9IFtdO1xuXG5mdW5jdGlvbiBkZXRlY3RFdmVudHMoKSB7XG4gIHZhciBhbmltRW5kID0gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoJ2FuaW1hdGlvbmVuZCcpO1xuICB2YXIgdHJhbnNFbmQgPSBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSgndHJhbnNpdGlvbmVuZCcpO1xuXG4gIGlmIChhbmltRW5kKSB7XG4gICAgZW5kRXZlbnRzLnB1c2goYW5pbUVuZCk7XG4gIH1cblxuICBpZiAodHJhbnNFbmQpIHtcbiAgICBlbmRFdmVudHMucHVzaCh0cmFuc0VuZCk7XG4gIH1cbn1cblxuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICBkZXRlY3RFdmVudHMoKTtcbn1cblxuLy8gV2UgdXNlIHRoZSByYXcge2FkZHxyZW1vdmV9RXZlbnRMaXN0ZW5lcigpIGNhbGwgYmVjYXVzZSBFdmVudExpc3RlbmVyXG4vLyBkb2VzIG5vdCBrbm93IGhvdyB0byByZW1vdmUgZXZlbnQgbGlzdGVuZXJzIGFuZCB3ZSByZWFsbHkgc2hvdWxkXG4vLyBjbGVhbiB1cC4gQWxzbywgdGhlc2UgZXZlbnRzIGFyZSBub3QgdHJpZ2dlcmVkIGluIG9sZGVyIGJyb3dzZXJzXG4vLyBzbyB3ZSBzaG91bGQgYmUgQS1PSyBoZXJlLlxuXG5mdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50TmFtZSwgZXZlbnRMaXN0ZW5lcikge1xuICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBldmVudExpc3RlbmVyLCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnROYW1lLCBldmVudExpc3RlbmVyKSB7XG4gIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGV2ZW50TGlzdGVuZXIsIGZhbHNlKTtcbn1cblxudmFyIFJlYWN0VHJhbnNpdGlvbkV2ZW50cyA9IHtcbiAgYWRkRW5kRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKG5vZGUsIGV2ZW50TGlzdGVuZXIpIHtcbiAgICBpZiAoZW5kRXZlbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy8gSWYgQ1NTIHRyYW5zaXRpb25zIGFyZSBub3Qgc3VwcG9ydGVkLCB0cmlnZ2VyIGFuIFwiZW5kIGFuaW1hdGlvblwiXG4gICAgICAvLyBldmVudCBpbW1lZGlhdGVseS5cbiAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGV2ZW50TGlzdGVuZXIsIDApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbmRFdmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZW5kRXZlbnQpIHtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIobm9kZSwgZW5kRXZlbnQsIGV2ZW50TGlzdGVuZXIpO1xuICAgIH0pO1xuICB9LFxuXG4gIHJlbW92ZUVuZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIChub2RlLCBldmVudExpc3RlbmVyKSB7XG4gICAgaWYgKGVuZEV2ZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZW5kRXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGVuZEV2ZW50KSB7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKG5vZGUsIGVuZEV2ZW50LCBldmVudExpc3RlbmVyKTtcbiAgICB9KTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFRyYW5zaXRpb25FdmVudHM7Il19
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _assign = require('object-assign');

exports.createUpdateQueue = function (partialState) {
  var queue = {
    partialState: partialState,
    callback: null,
    callbackWasCalled: false,
    next: null,
    isReplace: false,
    isForced: false,
    tail: null
  };
  queue.tail = queue;
  return queue;
};

exports.addToQueue = function (queue, partialState) {
  var node = {
    partialState: partialState,
    callback: null,
    callbackWasCalled: false,
    next: null
  };
  queue.tail.next = node;
  queue.tail = node;
  return queue;
};

exports.addCallbackToQueue = function (queue, callback) {
  if (queue.tail.callback) {
    // If the tail already as a callback, add an empty node to queue
    exports.addToQueue(queue, null);
  }
  queue.tail.callback = callback;
  return queue;
};

exports.callCallbacks = function (queue, context) {
  var node = queue;
  while (node) {
    if (node.callback && !node.callbackWasCalled) {
      node.callbackWasCalled = true;
      node.callback.call(context);
    }
    node = node.next;
  }
};

exports.mergeUpdateQueue = function (queue, prevState, props) {
  var node = queue;
  var state = queue.isReplace ? null : _assign({}, prevState);
  while (node) {
    var _partialState = void 0;
    if (typeof node.partialState === 'function') {
      var updateFn = node.partialState;
      _partialState = updateFn(state, props);
    } else {
      _partialState = node.partialState;
    }
    state = _assign(state || {}, _partialState);
    node = node.next;
  }
  return state;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3B1YmxpYy9saWIvcmVhY3QtZG9tL2xpYi9SZWFjdEZpYmVyVXBkYXRlUXVldWUuanMiXSwibmFtZXMiOlsiX2Fzc2lnbiIsInJlcXVpcmUiLCJleHBvcnRzIiwiY3JlYXRlVXBkYXRlUXVldWUiLCJwYXJ0aWFsU3RhdGUiLCJxdWV1ZSIsImNhbGxiYWNrIiwiY2FsbGJhY2tXYXNDYWxsZWQiLCJuZXh0IiwiaXNSZXBsYWNlIiwiaXNGb3JjZWQiLCJ0YWlsIiwiYWRkVG9RdWV1ZSIsIm5vZGUiLCJhZGRDYWxsYmFja1RvUXVldWUiLCJjYWxsQ2FsbGJhY2tzIiwiY29udGV4dCIsImNhbGwiLCJtZXJnZVVwZGF0ZVF1ZXVlIiwicHJldlN0YXRlIiwicHJvcHMiLCJzdGF0ZSIsIl9wYXJ0aWFsU3RhdGUiLCJ1cGRhdGVGbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0FBV0E7O0FBRUEsSUFBSUEsVUFBVUMsUUFBUSxlQUFSLENBQWQ7O0FBRUFDLFFBQVFDLGlCQUFSLEdBQTRCLFVBQVVDLFlBQVYsRUFBd0I7QUFDbEQsTUFBSUMsUUFBUTtBQUNWRCxrQkFBY0EsWUFESjtBQUVWRSxjQUFVLElBRkE7QUFHVkMsdUJBQW1CLEtBSFQ7QUFJVkMsVUFBTSxJQUpJO0FBS1ZDLGVBQVcsS0FMRDtBQU1WQyxjQUFVLEtBTkE7QUFPVkMsVUFBTTtBQVBJLEdBQVo7QUFTQU4sUUFBTU0sSUFBTixHQUFhTixLQUFiO0FBQ0EsU0FBT0EsS0FBUDtBQUNELENBWkQ7O0FBY0FILFFBQVFVLFVBQVIsR0FBcUIsVUFBVVAsS0FBVixFQUFpQkQsWUFBakIsRUFBK0I7QUFDbEQsTUFBSVMsT0FBTztBQUNUVCxrQkFBY0EsWUFETDtBQUVURSxjQUFVLElBRkQ7QUFHVEMsdUJBQW1CLEtBSFY7QUFJVEMsVUFBTTtBQUpHLEdBQVg7QUFNQUgsUUFBTU0sSUFBTixDQUFXSCxJQUFYLEdBQWtCSyxJQUFsQjtBQUNBUixRQUFNTSxJQUFOLEdBQWFFLElBQWI7QUFDQSxTQUFPUixLQUFQO0FBQ0QsQ0FWRDs7QUFZQUgsUUFBUVksa0JBQVIsR0FBNkIsVUFBVVQsS0FBVixFQUFpQkMsUUFBakIsRUFBMkI7QUFDdEQsTUFBSUQsTUFBTU0sSUFBTixDQUFXTCxRQUFmLEVBQXlCO0FBQ3ZCO0FBQ0FKLFlBQVFVLFVBQVIsQ0FBbUJQLEtBQW5CLEVBQTBCLElBQTFCO0FBQ0Q7QUFDREEsUUFBTU0sSUFBTixDQUFXTCxRQUFYLEdBQXNCQSxRQUF0QjtBQUNBLFNBQU9ELEtBQVA7QUFDRCxDQVBEOztBQVNBSCxRQUFRYSxhQUFSLEdBQXdCLFVBQVVWLEtBQVYsRUFBaUJXLE9BQWpCLEVBQTBCO0FBQ2hELE1BQUlILE9BQU9SLEtBQVg7QUFDQSxTQUFPUSxJQUFQLEVBQWE7QUFDWCxRQUFJQSxLQUFLUCxRQUFMLElBQWlCLENBQUNPLEtBQUtOLGlCQUEzQixFQUE4QztBQUM1Q00sV0FBS04saUJBQUwsR0FBeUIsSUFBekI7QUFDQU0sV0FBS1AsUUFBTCxDQUFjVyxJQUFkLENBQW1CRCxPQUFuQjtBQUNEO0FBQ0RILFdBQU9BLEtBQUtMLElBQVo7QUFDRDtBQUNGLENBVEQ7O0FBV0FOLFFBQVFnQixnQkFBUixHQUEyQixVQUFVYixLQUFWLEVBQWlCYyxTQUFqQixFQUE0QkMsS0FBNUIsRUFBbUM7QUFDNUQsTUFBSVAsT0FBT1IsS0FBWDtBQUNBLE1BQUlnQixRQUFRaEIsTUFBTUksU0FBTixHQUFrQixJQUFsQixHQUF5QlQsUUFBUSxFQUFSLEVBQVltQixTQUFaLENBQXJDO0FBQ0EsU0FBT04sSUFBUCxFQUFhO0FBQ1gsUUFBSVMsZ0JBQWdCLEtBQUssQ0FBekI7QUFDQSxRQUFJLE9BQU9ULEtBQUtULFlBQVosS0FBNkIsVUFBakMsRUFBNkM7QUFDM0MsVUFBSW1CLFdBQVdWLEtBQUtULFlBQXBCO0FBQ0FrQixzQkFBZ0JDLFNBQVNGLEtBQVQsRUFBZ0JELEtBQWhCLENBQWhCO0FBQ0QsS0FIRCxNQUdPO0FBQ0xFLHNCQUFnQlQsS0FBS1QsWUFBckI7QUFDRDtBQUNEaUIsWUFBUXJCLFFBQVFxQixTQUFTLEVBQWpCLEVBQXFCQyxhQUFyQixDQUFSO0FBQ0FULFdBQU9BLEtBQUtMLElBQVo7QUFDRDtBQUNELFNBQU9hLEtBQVA7QUFDRCxDQWZEIiwiZmlsZSI6IlJlYWN0RmliZXJVcGRhdGVRdWV1ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbmV4cG9ydHMuY3JlYXRlVXBkYXRlUXVldWUgPSBmdW5jdGlvbiAocGFydGlhbFN0YXRlKSB7XG4gIHZhciBxdWV1ZSA9IHtcbiAgICBwYXJ0aWFsU3RhdGU6IHBhcnRpYWxTdGF0ZSxcbiAgICBjYWxsYmFjazogbnVsbCxcbiAgICBjYWxsYmFja1dhc0NhbGxlZDogZmFsc2UsXG4gICAgbmV4dDogbnVsbCxcbiAgICBpc1JlcGxhY2U6IGZhbHNlLFxuICAgIGlzRm9yY2VkOiBmYWxzZSxcbiAgICB0YWlsOiBudWxsXG4gIH07XG4gIHF1ZXVlLnRhaWwgPSBxdWV1ZTtcbiAgcmV0dXJuIHF1ZXVlO1xufTtcblxuZXhwb3J0cy5hZGRUb1F1ZXVlID0gZnVuY3Rpb24gKHF1ZXVlLCBwYXJ0aWFsU3RhdGUpIHtcbiAgdmFyIG5vZGUgPSB7XG4gICAgcGFydGlhbFN0YXRlOiBwYXJ0aWFsU3RhdGUsXG4gICAgY2FsbGJhY2s6IG51bGwsXG4gICAgY2FsbGJhY2tXYXNDYWxsZWQ6IGZhbHNlLFxuICAgIG5leHQ6IG51bGxcbiAgfTtcbiAgcXVldWUudGFpbC5uZXh0ID0gbm9kZTtcbiAgcXVldWUudGFpbCA9IG5vZGU7XG4gIHJldHVybiBxdWV1ZTtcbn07XG5cbmV4cG9ydHMuYWRkQ2FsbGJhY2tUb1F1ZXVlID0gZnVuY3Rpb24gKHF1ZXVlLCBjYWxsYmFjaykge1xuICBpZiAocXVldWUudGFpbC5jYWxsYmFjaykge1xuICAgIC8vIElmIHRoZSB0YWlsIGFscmVhZHkgYXMgYSBjYWxsYmFjaywgYWRkIGFuIGVtcHR5IG5vZGUgdG8gcXVldWVcbiAgICBleHBvcnRzLmFkZFRvUXVldWUocXVldWUsIG51bGwpO1xuICB9XG4gIHF1ZXVlLnRhaWwuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgcmV0dXJuIHF1ZXVlO1xufTtcblxuZXhwb3J0cy5jYWxsQ2FsbGJhY2tzID0gZnVuY3Rpb24gKHF1ZXVlLCBjb250ZXh0KSB7XG4gIHZhciBub2RlID0gcXVldWU7XG4gIHdoaWxlIChub2RlKSB7XG4gICAgaWYgKG5vZGUuY2FsbGJhY2sgJiYgIW5vZGUuY2FsbGJhY2tXYXNDYWxsZWQpIHtcbiAgICAgIG5vZGUuY2FsbGJhY2tXYXNDYWxsZWQgPSB0cnVlO1xuICAgICAgbm9kZS5jYWxsYmFjay5jYWxsKGNvbnRleHQpO1xuICAgIH1cbiAgICBub2RlID0gbm9kZS5uZXh0O1xuICB9XG59O1xuXG5leHBvcnRzLm1lcmdlVXBkYXRlUXVldWUgPSBmdW5jdGlvbiAocXVldWUsIHByZXZTdGF0ZSwgcHJvcHMpIHtcbiAgdmFyIG5vZGUgPSBxdWV1ZTtcbiAgdmFyIHN0YXRlID0gcXVldWUuaXNSZXBsYWNlID8gbnVsbCA6IF9hc3NpZ24oe30sIHByZXZTdGF0ZSk7XG4gIHdoaWxlIChub2RlKSB7XG4gICAgdmFyIF9wYXJ0aWFsU3RhdGUgPSB2b2lkIDA7XG4gICAgaWYgKHR5cGVvZiBub2RlLnBhcnRpYWxTdGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFyIHVwZGF0ZUZuID0gbm9kZS5wYXJ0aWFsU3RhdGU7XG4gICAgICBfcGFydGlhbFN0YXRlID0gdXBkYXRlRm4oc3RhdGUsIHByb3BzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3BhcnRpYWxTdGF0ZSA9IG5vZGUucGFydGlhbFN0YXRlO1xuICAgIH1cbiAgICBzdGF0ZSA9IF9hc3NpZ24oc3RhdGUgfHwge30sIF9wYXJ0aWFsU3RhdGUpO1xuICAgIG5vZGUgPSBub2RlLm5leHQ7XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufTsiXX0=
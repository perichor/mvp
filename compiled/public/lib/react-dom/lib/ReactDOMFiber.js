/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var ReactFiberReconciler = require('./ReactFiberReconciler');

var warning = require('fbjs/lib/warning');

function recursivelyAppendChildren(parent, child) {
  if (!child) {
    return;
  }
  /* $FlowFixMe: Element should have this property. */
  if (child.nodeType === 1) {
    /* $FlowFixMe: Refinement issue. I don't know how to express different. */
    parent.appendChild(child);
  } else {
    /* As a result of the refinement issue this type isn't known. */
    var node = child;
    do {
      recursivelyAppendChildren(parent, node.output);
    } while (node = node.sibling);
  }
}

var DOMRenderer = ReactFiberReconciler({
  updateContainer: function updateContainer(container, children) {
    container.innerHTML = '';
    recursivelyAppendChildren(container, children);
  },
  createInstance: function createInstance(type, props, children) {
    var domElement = document.createElement(type);
    recursivelyAppendChildren(domElement, children);
    if (typeof props.children === 'string') {
      domElement.textContent = props.children;
    }
    return domElement;
  },
  prepareUpdate: function prepareUpdate(domElement, oldProps, newProps, children) {
    return true;
  },
  commitUpdate: function commitUpdate(domElement, oldProps, newProps, children) {
    domElement.innerHTML = '';
    recursivelyAppendChildren(domElement, children);
    if (typeof newProps.children === 'string') {
      domElement.textContent = newProps.children;
    }
  },
  deleteInstance: function deleteInstance(instance) {
    // Noop
  },

  scheduleAnimationCallback: window.requestAnimationFrame,

  scheduleDeferredCallback: window.requestIdleCallback

});

var warned = false;

function warnAboutUnstableUse() {
  process.env.NODE_ENV !== 'production' ? warning(warned, 'You are using React DOM Fiber which is an experimental renderer. ' + 'It is likely to have bugs, breaking changes and is unsupported.') : void 0;
  warned = true;
}

var ReactDOM = {
  render: function render(element, container) {
    warnAboutUnstableUse();
    if (!container._reactRootContainer) {
      container._reactRootContainer = DOMRenderer.mountContainer(element, container);
    } else {
      DOMRenderer.updateContainer(element, container._reactRootContainer);
    }
  },
  unmountComponentAtNode: function unmountComponentAtNode(container) {
    warnAboutUnstableUse();
    var root = container._reactRootContainer;
    if (root) {
      // TODO: Is it safe to reset this now or should I wait since this
      // unmount could be deferred?
      container._reactRootContainer = null;
      DOMRenderer.unmountContainer(root);
    }
  }
};

module.exports = ReactDOM;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3B1YmxpYy9saWIvcmVhY3QtZG9tL2xpYi9SZWFjdERPTUZpYmVyLmpzIl0sIm5hbWVzIjpbIlJlYWN0RmliZXJSZWNvbmNpbGVyIiwicmVxdWlyZSIsIndhcm5pbmciLCJyZWN1cnNpdmVseUFwcGVuZENoaWxkcmVuIiwicGFyZW50IiwiY2hpbGQiLCJub2RlVHlwZSIsImFwcGVuZENoaWxkIiwibm9kZSIsIm91dHB1dCIsInNpYmxpbmciLCJET01SZW5kZXJlciIsInVwZGF0ZUNvbnRhaW5lciIsImNvbnRhaW5lciIsImNoaWxkcmVuIiwiaW5uZXJIVE1MIiwiY3JlYXRlSW5zdGFuY2UiLCJ0eXBlIiwicHJvcHMiLCJkb21FbGVtZW50IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwidGV4dENvbnRlbnQiLCJwcmVwYXJlVXBkYXRlIiwib2xkUHJvcHMiLCJuZXdQcm9wcyIsImNvbW1pdFVwZGF0ZSIsImRlbGV0ZUluc3RhbmNlIiwiaW5zdGFuY2UiLCJzY2hlZHVsZUFuaW1hdGlvbkNhbGxiYWNrIiwid2luZG93IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrIiwicmVxdWVzdElkbGVDYWxsYmFjayIsIndhcm5lZCIsIndhcm5BYm91dFVuc3RhYmxlVXNlIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiUmVhY3RET00iLCJyZW5kZXIiLCJlbGVtZW50IiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIm1vdW50Q29udGFpbmVyIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInJvb3QiLCJ1bm1vdW50Q29udGFpbmVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0FBV0E7O0FBRUEsSUFBSUEsdUJBQXVCQyxRQUFRLHdCQUFSLENBQTNCOztBQUVBLElBQUlDLFVBQVVELFFBQVEsa0JBQVIsQ0FBZDs7QUFFQSxTQUFTRSx5QkFBVCxDQUFt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IjoiUmVhY3RET01GaWJlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RmliZXJSZWNvbmNpbGVyID0gcmVxdWlyZSgnLi9SZWFjdEZpYmVyUmVjb25jaWxlcicpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuZnVuY3Rpb24gcmVjdXJzaXZlbHlBcHBlbmRDaGlsZHJlbihwYXJlbnQsIGNoaWxkKSB7XG4gIGlmICghY2hpbGQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLyogJEZsb3dGaXhNZTogRWxlbWVudCBzaG91bGQgaGF2ZSB0aGlzIHByb3BlcnR5LiAqL1xuICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEpIHtcbiAgICAvKiAkRmxvd0ZpeE1lOiBSZWZpbmVtZW50IGlzc3VlLiBJIGRvbid0IGtub3cgaG93IHRvIGV4cHJlc3MgZGlmZmVyZW50LiAqL1xuICAgIHBhcmVudC5hcHBlbmRDaGlsZChjaGlsZCk7XG4gIH0gZWxzZSB7XG4gICAgLyogQXMgYSByZXN1bHQgb2YgdGhlIHJlZmluZW1lbnQgaXNzdWUgdGhpcyB0eXBlIGlzbid0IGtub3duLiAqL1xuICAgIHZhciBub2RlID0gY2hpbGQ7XG4gICAgZG8ge1xuICAgICAgcmVjdXJzaXZlbHlBcHBlbmRDaGlsZHJlbihwYXJlbnQsIG5vZGUub3V0cHV0KTtcbiAgICB9IHdoaWxlIChub2RlID0gbm9kZS5zaWJsaW5nKTtcbiAgfVxufVxuXG52YXIgRE9NUmVuZGVyZXIgPSBSZWFjdEZpYmVyUmVjb25jaWxlcih7XG4gIHVwZGF0ZUNvbnRhaW5lcjogZnVuY3Rpb24gKGNvbnRhaW5lciwgY2hpbGRyZW4pIHtcbiAgICBjb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG4gICAgcmVjdXJzaXZlbHlBcHBlbmRDaGlsZHJlbihjb250YWluZXIsIGNoaWxkcmVuKTtcbiAgfSxcbiAgY3JlYXRlSW5zdGFuY2U6IGZ1bmN0aW9uICh0eXBlLCBwcm9wcywgY2hpbGRyZW4pIHtcbiAgICB2YXIgZG9tRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodHlwZSk7XG4gICAgcmVjdXJzaXZlbHlBcHBlbmRDaGlsZHJlbihkb21FbGVtZW50LCBjaGlsZHJlbik7XG4gICAgaWYgKHR5cGVvZiBwcm9wcy5jaGlsZHJlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGRvbUVsZW1lbnQudGV4dENvbnRlbnQgPSBwcm9wcy5jaGlsZHJlbjtcbiAgICB9XG4gICAgcmV0dXJuIGRvbUVsZW1lbnQ7XG4gIH0sXG4gIHByZXBhcmVVcGRhdGU6IGZ1bmN0aW9uIChkb21FbGVtZW50LCBvbGRQcm9wcywgbmV3UHJvcHMsIGNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGNvbW1pdFVwZGF0ZTogZnVuY3Rpb24gKGRvbUVsZW1lbnQsIG9sZFByb3BzLCBuZXdQcm9wcywgY2hpbGRyZW4pIHtcbiAgICBkb21FbGVtZW50LmlubmVySFRNTCA9ICcnO1xuICAgIHJlY3Vyc2l2ZWx5QXBwZW5kQ2hpbGRyZW4oZG9tRWxlbWVudCwgY2hpbGRyZW4pO1xuICAgIGlmICh0eXBlb2YgbmV3UHJvcHMuY2hpbGRyZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICBkb21FbGVtZW50LnRleHRDb250ZW50ID0gbmV3UHJvcHMuY2hpbGRyZW47XG4gICAgfVxuICB9LFxuICBkZWxldGVJbnN0YW5jZTogZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgLy8gTm9vcFxuICB9LFxuXG5cbiAgc2NoZWR1bGVBbmltYXRpb25DYWxsYmFjazogd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSxcblxuICBzY2hlZHVsZURlZmVycmVkQ2FsbGJhY2s6IHdpbmRvdy5yZXF1ZXN0SWRsZUNhbGxiYWNrXG5cbn0pO1xuXG52YXIgd2FybmVkID0gZmFsc2U7XG5cbmZ1bmN0aW9uIHdhcm5BYm91dFVuc3RhYmxlVXNlKCkge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh3YXJuZWQsICdZb3UgYXJlIHVzaW5nIFJlYWN0IERPTSBGaWJlciB3aGljaCBpcyBhbiBleHBlcmltZW50YWwgcmVuZGVyZXIuICcgKyAnSXQgaXMgbGlrZWx5IHRvIGhhdmUgYnVncywgYnJlYWtpbmcgY2hhbmdlcyBhbmQgaXMgdW5zdXBwb3J0ZWQuJykgOiB2b2lkIDA7XG4gIHdhcm5lZCA9IHRydWU7XG59XG5cbnZhciBSZWFjdERPTSA9IHtcbiAgcmVuZGVyOiBmdW5jdGlvbiAoZWxlbWVudCwgY29udGFpbmVyKSB7XG4gICAgd2FybkFib3V0VW5zdGFibGVVc2UoKTtcbiAgICBpZiAoIWNvbnRhaW5lci5fcmVhY3RSb290Q29udGFpbmVyKSB7XG4gICAgICBjb250YWluZXIuX3JlYWN0Um9vdENvbnRhaW5lciA9IERPTVJlbmRlcmVyLm1vdW50Q29udGFpbmVyKGVsZW1lbnQsIGNvbnRhaW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIERPTVJlbmRlcmVyLnVwZGF0ZUNvbnRhaW5lcihlbGVtZW50LCBjb250YWluZXIuX3JlYWN0Um9vdENvbnRhaW5lcik7XG4gICAgfVxuICB9LFxuICB1bm1vdW50Q29tcG9uZW50QXROb2RlOiBmdW5jdGlvbiAoY29udGFpbmVyKSB7XG4gICAgd2FybkFib3V0VW5zdGFibGVVc2UoKTtcbiAgICB2YXIgcm9vdCA9IGNvbnRhaW5lci5fcmVhY3RSb290Q29udGFpbmVyO1xuICAgIGlmIChyb290KSB7XG4gICAgICAvLyBUT0RPOiBJcyBpdCBzYWZlIHRvIHJlc2V0IHRoaXMgbm93IG9yIHNob3VsZCBJIHdhaXQgc2luY2UgdGhpc1xuICAgICAgLy8gdW5tb3VudCBjb3VsZCBiZSBkZWZlcnJlZD9cbiAgICAgIGNvbnRhaW5lci5fcmVhY3RSb290Q29udGFpbmVyID0gbnVsbDtcbiAgICAgIERPTVJlbmRlcmVyLnVubW91bnRDb250YWluZXIocm9vdCk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NOyJdfQ==